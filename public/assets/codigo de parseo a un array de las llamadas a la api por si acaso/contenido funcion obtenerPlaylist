require '../../../vendor/autoload.php';
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}  
$api = new SpotifyWebAPI\SpotifyWebAPI();
$collection = (new MongoDB\Client)->LoBeat->usuarios;
$result = $collection->findOne([
    '_id' => new MongoDB\BSON\ObjectID($_SESSION['logged_user_id'])
]);
// Fetch the saved access token from somewhere. A session for example.
$api->setAccessToken($result['spotify_access_token']);

// Utilizamos el endpoint "Get Playlist" para solicitar información sobre una determinada playlist
$playlist_data = $api->getPlaylist($playlistSpotifyID);

// Array en el que almacenamos todos los datos
$playlist_data_array = array();

//--------------------------------------------- FORMATEO DE DATOS ----------------------------------------------------

/* collaborative : boolean
    true if the owner allows other users to modify the playlist.
*/
$playlist_data_array['collaborative'] = $playlist_data->collaborative;

/*  description : string
    The playlist description. Only returned for modified, verified playlists, otherwise null.
*/
$playlist_data_array['description'] = $playlist_data->description;

/*  external_urls : object
    Known external URLs for this playlist.
    --> spotify : string
        The Spotify URL for the object.
*/
$playlist_data_array['external_urls'] = array(
    'spotify' => $playlist_data->external_urls->spotify
);

/*  followers : object
    Information about the followers of the playlist.
    --> href : string (Nullable)
        This will always be set to null, as the Web API does not support it at the moment.
    --> total : integer
        The total number of followers.
*/
$playlist_data_array['followers'] = array(
    'href' => $playlist_data->followers->href,
    'total' => $playlist_data->followers->total
);

/*  href : string
    A link to the Web API endpoint providing full details of the playlist.
*/
$playlist_data_array['href'] = $playlist_data->href;

/*  id : string
    The Spotify ID for the playlist.
*/
$playlist_data_array['id'] = $playlist_data->id;

/*  images : array of ImageObject
    Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See Working with Playlists. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day.
    --> url : string (Required)
        The source URL of the image.
        Example value: "https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228"
    --> height : integer (Required) (Nullable)
        The image height in pixels.
        Example value: 300
    --> width : integer (Required) (Nullable)
        The image width in pixels.
        Example value: 300
*/
if (!empty($playlist_data->images)) {
    foreach ($playlist_data->images as $image) {
        $images_array[] = array(
            'url' => $image->url,
            'height' => $image->height,
            'width' => $image->width
        );
    }
}
else {
    $images_array[] = array();
}
$playlist_data_array['images'] = $images_array;

/*  name : string
    The name of the playlist.
*/
$playlist_data_array['name'] = $playlist_data->name;

/*  owner : object
    The user who owns the playlist
    --> external_urls : object
        Known public external URLs for this user.
        --> spotify : string
            The Spotify URL for the object.
    --> followers : object
        Information about the followers of this user.
        --> href : string (Nullable)
            This will always be set to null, as the Web API does not support it at the moment.
        --> total : integer
            The total number of followers.
    --> href : string
        A link to the Web API endpoint for this user.
    --> id : string
        The Spotify user ID for this user.
    --> type : string
        The object type.
        Allowed values: "user"
    --> uri : string
        The Spotify URI for this user.
    --> display_name : string (Nullable)
        The name displayed on the user's profile. null if not available.
*/
$playlist_data_array['owner'] = array(
    'external_urls' => array(
        'spotify' => $playlist_data->owner->external_urls->spotify
    ),
    'followers' => array(
        'href' => $playlist_data->owner->followers->href,
        'total' => $playlist_data->owner->followers->total
    ),
    'href' => $playlist_data->owner->href,
    'id' => $playlist_data->owner->id,
    'type' => $playlist_data->owner->type,
    'uri' => $playlist_data->owner->uri,
    'display_name' => $playlist_data->owner->display_name
);

/*  public : boolean 
    The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists
*/
$playlist_data_array['public'] = $playlist_data->public;

/*  snapshot_id : string
    The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
*/
$playlist_data_array['snapshot_id'] = $playlist_data->snapshot_id;

/*  tracks : object
    The tracks of the playlist.
    --> href : string (Required)
    A link to the Web API endpoint returning the full result of the request
    Example value: "https://api.spotify.com/v1/me/shows?offset=0&limit=20"
    --> limit : integer (Required)
    The maximum number of items in the response (as set in the query or by default).
    Example value: 20
    --> next : string (Required) (Nullable)
    URL to the next page of items. ( null if none)
    Example value: "https://api.spotify.com/v1/me/shows?offset=1&limit=1"
    --> offset : integer (Required)
    The offset of the items returned (as set in the query or by default)
    Example value: 0
    --> previous : string (Required) (Nullable)
    URL to the previous page of items. ( null if none)
    Example value: "https://api.spotify.com/v1/me/shows?offset=1&limit=1"
    --> total : integer (Required)
    The total number of items available to return.
    Example value: 4
    --> items : array of PlaylistTrackObject (Requiered)
        --> added_at
        --> added-by
            -->
                -->
            -->
                -->
                -->
            -->
            -->
            -->
            -->
        -->
        -->
        --> TrackObject
            --> album
                -->
                -->
                -->
                -->
                    -->
                -->
                -->
                -->
                    -->
                    -->
                    -->
                -->
                -->
                -->
                -->
                    -->
                -->
                -->
                -->
                    -->
                    -->
                -->
                    -->
                    -->
                    -->
                -->
                -->
                -->
                -->
                -->
                    -->
                        -->
                    -->
                    -->
                    -->
                    -->
                    -->
            --> artist
                -->
                    -->
                -->
                    -->
                    -->
                -->
                -->
                -->
                -->
                    -->
                    -->
                    -->
                -->
                -->
                -->
                -->
            -->
            -->
            -->
            -->
            --> external-ids
                -->
                -->
                -->
            --> external-urls
                -->
            -->
            -->
            -->
            --> linked_from
            --> restrictions
                -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
        --> EpisodeObject
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
            -->
*/
$playlist_data_array['tracks'] = array(
    'href' => $playlist_data->tracks->href,
    'limit' => $playlist_data->tracks->limit,
    'next' => $playlist_data->tracks->next,
    'offset' => $playlist_data->tracks->offset,
    'previous' => $playlist_data->tracks->previous,
    'total' => $playlist_data->tracks->total,
    'items' => array()
);

if (!empty($playlist_data->tracks->items)) {
    $i = 0;
    foreach ($playlist_data->tracks->items as $trackItem) {
        $trackItem_array[] = array(
            'added_at' => $trackItem->added_at,
            'added_by' => array(
                'external_urls' => $trackItem->added_by->external_urls,
                'followers' => array(
                    'href' => $trackItem->added_by->followers->href,
                    'total' => $trackItem->added_by->followers->total
                ),
                'href' => $trackItem->added_by->href,
                'id' => $trackItem->added_by->id,
                'type' => $trackItem->added_by->type,
                'uri' => $trackItem->added_by->uri
            ),
            'is_local' => $trackItem->is_local,
            'track' => array(), //de momento lo inicializamos como array vacío
        );

        //aquí diferenciamos entre el tipo de instancia que será track
        if ($trackItem->track->type == 'track') { // El objeto es de tipo TrackObject
            $contenidoTrack = array(
                'album' => array(
                    /*  TODO: falta parsear el album (no lo necesitamos de momento)
                    'album_type' => $trackItem->track->album->album_type,
                    'total_tracks' => $trackItem->track->album->album_type,
                    'available_markets' => $trackItem->track->album->album_type,
                    'external_urls' => $trackItem->track->album->album_type,
                    'href' => $trackItem->track->album->album_type,
                    'id' => $trackItem->track->album->album_type,
                    'images' => $trackItem->track->album->album_type,
                    'name' => $trackItem->track->album->album_type,
                    'release_date' => $trackItem->track->album->album_type,
                    'release_date_precision' => $trackItem->track->album->album_type,
                    'restrictions' => $trackItem->track->album->album_type,
                    'type' => $trackItem->track->album->album_type,
                    'uri' => $trackItem->track->album->album_type,
                    'copyrights' => $trackItem->track->album->album_type,
                    'external_ids' => $trackItem->track->album->album_type,
                    'genres' => $trackItem->track->album->album_type,
                    'label' => $trackItem->track->album->album_type,
                    'popularity' => $trackItem->track->album->album_type,
                    'album_group' => $trackItem->track->album->album_type,
                    'artists' => $trackItem->track->album->album_type,
                    */
                ),
                'artist' => array (
                    /* TODO: falta parsear los artistas (no lo necesitamos de momento)
                    OJOO!! por que artists no es un object como album, sino un array of ArtistObject (asique la declracion artists => array(...) esta mal, hay que cambiarla a lo del foreach etc etc)
                    ''$trackItem->track->artist,
                    */
                ),
                'available_markets' => $trackItem->track->available_markets,
                'disc_number' => $trackItem->track->disc_number,
                'duration_ms' => $trackItem->track->duration_ms,
                'explicit' => $trackItem->track->explicit,
                'external_ids' => array(
                    'isrc' => $trackItem->track->external_ids->isrc,
                    'ean' => $trackItem->track->external_ids->ean,
                    'upc' => $trackItem->track->external_ids->upc,
                ),
                'external_urls' => array (
                    'spotify' => $trackItem->track->external_urls->spotify
                ),
                'href' => $trackItem->track->href,
                'id' => $trackItem->track->id,
                'is_playable' => $trackItem->track->is_playable,
                'linked_from' => $trackItem->track->linked_from,    //nose muy bien que hacer con este. Es un objeto vacío (mirra la documentación)
                'restrictions' => array(
                    'reason' => $trackItem->track->restrictions->reason
                ),
                'name' => $trackItem->track->name,
                'popularity' => $trackItem->track->popularity,
                'preview_url' => $trackItem->track->preview_url,
                'track_number' => $trackItem->track->track_number,
                'type' => $trackItem->track->type,
                'uri' => $trackItem->track->uri,
                'is_local' => $trackItem->track->is_local
            );
        } elseif ($trackItem->track->type == 'episode') { // El objeto es de tipo EpisodeObject
            $contenidoTrack = array(
                //TODO: falta parsear track si es de tipo EpisodeObject (de momento no lo necesitamos asique lo dejo por aquí)
            );
        }
        $trackItem_array[$i]['track'] = $contenidoTrack;
        $i = $i + 1;
    }
}
else {
    $trackItem_array[] = array();
}
$playlist_data_array['tracks']['items'] = $trackItem_array;

/*  type : string
    The object type: "playlist"
*/
$playlist_data_array['type'] = $playlist_data->type;

/*  uri : string
    The Spotify URI for the playlist.
*/
$playlist_data_array['uri'] = $playlist_data->uri;

//--------------------------------------------------------------------------------------------------------------------

// Devolvemos el array con toda la información
return $playlist_data_array;