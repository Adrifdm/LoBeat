require '../../../vendor/autoload.php';
if (session_status() == PHP_SESSION_NONE) {
    session_start();
}  
$api = new SpotifyWebAPI\SpotifyWebAPI();
$collection = (new MongoDB\Client)->LoBeat->usuarios;
$result = $collection->findOne([
    '_id' => new MongoDB\BSON\ObjectID($_SESSION['logged_user_id'])
]);
// Fetch the saved access token from somewhere. A session for example.
$api->setAccessToken($result['spotify_access_token']);

// Utilizamos el endpoint "Get Current User's Playlists" para solicitar información sobre las playlists de un determinado usuario
$playlists_data = $api->getUserPlaylists($userSpotifyID);

// Array en el que almacenamos todos los datos
$playlists_data_array = array();

//--------------------------------------------- FORMATEO DE DATOS ----------------------------------------------------

/*  href : string (Required)
    A link to the Web API endpoint returning the full result of the request
    Example value: "https://api.spotify.com/v1/me/shows?offset=0&limit=20"
*/
$playlists_data_array['href'] = $playlists_data->href;

/*  limit : integer (Required)
    The maximum number of items in the response (as set in the query or by default).
    Example value: 20
*/
$playlists_data_array['limit'] = $playlists_data->limit;

/*  next : integer (Nullable)
    URL to the next page of items. ( null if none)
    Example value: "https://api.spotify.com/v1/me/shows?offset=1&limit=1"
*/
$playlists_data_array['next'] = $playlists_data->next;

/*  offset : integer (Required)
    The offset of the items returned (as set in the query or by default)
    Example value: 0
*/
$playlists_data_array['offset'] = $playlists_data->offset;

/*  previous : string (Required) (Nullable)
    URL to the previous page of items. ( null if none)
    Example value: "https://api.spotify.com/v1/me/shows?offset=1&limit=1"
*/
$playlists_data_array['previous'] = $playlists_data->previous;

/*  total : integer (Required)
    The total number of items available to return.
    Example value: 4
*/
$playlists_data_array['total'] = $playlists_data->total;

/*  items : array of SimplifiedPlaylistObject (Required)
    --> collaborative : boolean
        true if the owner allows other users to modify the playlist.
    --> description : string
        The playlist description. Only returned for modified, verified playlists, otherwise null.
    --> external_urls : object
        Known external URLs for this playlist.
        --> spotify : string
            The Spotify URL for the object.
    --> href : string
        A link to the Web API endpoint providing full details of the playlist.
    --> id : string
        The Spotify ID for the playlist.
    --> images : array of ImageObject
        Images for the playlist. The array may be empty or contain up to three images. The images are returned by size in descending order. See Working with Playlists. Note: If returned, the source URL for the image (url) is temporary and will expire in less than a day.
        --> url : string (Required)
            The source URL of the image.
            Example value: "https://i.scdn.co/image/ab67616d00001e02ff9ca10b55ce82ae553c8228"
        --> height : integer (Required) (Nullable)
            The image height in pixels.
            Example value: 300
        --> width : integer (Required) (Nullable)
            The image width in pixels.
            Example value: 300
    --> name : string
        The name of the playlist.
    --> owner : object
        The user who owns the playlist
        --> external_urls : object
            Known public external URLs for this user.
            --> spotify : string
                The Spotify URL for the object.
        --> followers : object
            Information about the followers of this user.
            --> href : string (Nullable)
                This will always be set to null, as the Web API does not support it at the moment.
            --> total : integer
                The total number of followers.
        --> href : string
            A link to the Web API endpoint for this user.
        --> id : string
            The Spotify user ID for this user.
        --> type : string
            The object type.
            Allowed values: "user"
        --> uri : string
            The Spotify URI for this user.
        --> display_name : string (Nullable)
            The name displayed on the user's profile. null if not available.
    --> public : boolean
        The playlist's public/private status: true the playlist is public, false the playlist is private, null the playlist status is not relevant. For more about public/private status, see Working with Playlists
    --> snapshot_id : string
        The version identifier for the current playlist. Can be supplied in other requests to target a specific playlist version
    --> tracks : object
        A collection containing a link ( href ) to the Web API endpoint where full details of the playlist's tracks can be retrieved, along with the total number of tracks in the playlist. Note, a track object may be null. This can happen if a track is no longer available.
        --> type : string
            The object type: "playlist"
        --> uri : string
            The Spotify URI for the playlist.
    --> type : string
        The object type: "playlist"
    --> uri : string
        The Spotify URI for the playlist.
*/

if (!empty($playlists_data->items)) {
    foreach ($playlists_data->items as $item) {
        $items_array[] = array(
            'collaborative' => $item->collaborative,
            'description' => $item->description,
            'external_urls' => array(
                'spotify' => $item->external_urls->spotify
            ),
            'href' => $item->href,
            'id' => $item->id,
            'images' => array(),    //lo inicializamos como array vacío, luego lo llenamos
            'name' => $item->name,
            'owner' => array(
                'external_urls' => array(
                    'spotify' => $item->owner->external_urls->spotify
                ),
                'followers' => array(
                    'href' => $item->owner->followers->href,
                    'total' => $item->owner->followers->total
                ),
                'href' => $item->owner->href,
                'id' => $item->owner->id,
                'type' => $item->owner->type,
                'uri' => $item->owner->uri,
                'display_name' => $item->owner->display_name
            ),
            'public' => $item->public,
            'snapshot_id' => $item->snapshot_id,
            'tracks' => array(
                'href' => $item->track->href,
                'total' => $item->track->total
            ),
            'type' => $item->type,
            'uri' => $item->uri
        );

        //aquí llenamos el array images
        foreach ($item->images as $image) {
            $images_array[] = array(
                'url' => $image->url,
                'height' => $image->height,
                'width' => $image->width
            );
        }
        $items_array[0]['images'] = $images_array;
    }
}
else {
    $items_array[] = array();
}
$playlists_data_array['items'] = $items_array;

//--------------------------------------------------------------------------------------------------------------------

// Devolvemos el array con toda la información
return $playlists_data_array;